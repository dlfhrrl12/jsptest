package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.MemberVO;
import service.MemberService;
import service.MemberServiceImpl;


@WebServlet("/memb/*")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    //로그 객체
	private static final Logger log = LoggerFactory.getLogger(MemberController.class);
	
	//rdp 객체 requestDispatcher : 요청결과에 대한 응답 데이터를 jsp로 전송하는 역할
	private RequestDispatcher rdp;
	
	//목적지 주소
	private String destPage;
	
	//isOk : DB 저장 변수
	private int isOk;
	
	private MemberService msv; //(memberService)interface
	
    public MemberController() {
        // 생성자
    	msv = new MemberServiceImpl(); //service implement
    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		
		response.setContentType("text/html; charset=UTF-8");
		
		String uri = request.getRequestURI();
		log.info(uri);
		
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info(path);
		
		switch(path) {
		case "join":
			
			destPage = "/member/join.jsp";
			break;
			
		case "register":
			try {
				
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				String email = request.getParameter("email");
				int age = Integer.parseInt(request.getParameter("age"));
				String phone = request.getParameter("phone");
				
				MemberVO mvo = new MemberVO(id, pwd, email, age, phone);
				
				log.info("join mvo >> {}", mvo);
				
				isOk = msv.register(mvo);
				log.info("join >> {}", (isOk > 0)?"OK":"Fail");
				destPage="/index.jsp";
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			break;
		
		case "login":
			
			try {
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				
				MemberVO mvo = new MemberVO(id, pwd);
				log.info("login >> {}", mvo);
				
				MemberVO loginMvo = msv.login(mvo);
				log.info("return LoginMvo >> {}", loginMvo);
				
				
				if(loginMvo != null) {
					//session 에 저장
					//세션 객체 가져오기
					//연결된 세션 객체가 있다면 기존 객체를 가져오고, 없으면 생성
					
					HttpSession ses = request.getSession();
					ses.setAttribute("ses", loginMvo);
					ses.setMaxInactiveInterval(10*60); //로그인 유지시간 초단위로
				}else {
					//로그인 객체가 없다면
					//index.jsp로 메세지 전송
					request.setAttribute("msg_login", -1);
				}
				destPage="/index.jsp";
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			break;
			
		case "logout":
			try {
				HttpSession ses = request.getSession();
				
				MemberVO mvo = (MemberVO)ses.getAttribute("ses");
				log.info("ses에서 추출한 mvo >> {}", mvo);
				
				//lastlogin update
				isOk = msv.lastLogin(mvo.getId());
				log.info("lastLogin >> {}", (isOk > 0)?"OK":"Fail");
				ses.invalidate(); //세션 무효화(세션 끊기)
				destPage="/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "list":
			try {
				List<MemberVO> list = msv.getList();
				request.setAttribute("list", list);
				destPage = "/member/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "modify":
			try {
				destPage="/member/modify.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "update":
			try {
				//id, pwd, email, age, phone
				String id = request.getParameter("id"); //where
				String pwd = request.getParameter("pwd");
				String email = request.getParameter("email");
				int age = Integer.parseInt(request.getParameter("age"));
				String phone = request.getParameter("phone");
				
				MemberVO mvo = new MemberVO(id, pwd, email, age, phone);
				
				int isOk = msv.update(mvo);
				log.info("update >> {}", (isOk>0)?"OK":"Fail");
				
				if(isOk>0) {
					request.setAttribute("msg_update", "OK");
					
					//업데이트 후 세션 끊기
					HttpSession ses = request.getSession(); //로그인한 세션 가져오기
					ses.invalidate(); // 세션 끊기
					destPage="/index.jsp";
				}else {
					request.setAttribute("msg_update", "Fail");
					destPage="/member/modify.jsp";
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "post":
			try {
				destPage = "/member/post.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "delete":
			try {
				HttpSession ses = request.getSession();
				String id = ((MemberVO)ses.getAttribute("ses")).getId();
				
				int isOk = msv.delete(id);
				log.info("delete >> {}", (isOk>0)?"OK":"Fail");
				if(isOk>0) {
					request.setAttribute("msg_delete", "OK");
					ses.invalidate();
				}
				destPage = "/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		}
		
		rdp = request.getRequestDispatcher(destPage);
		
		rdp.forward(request, response);
		
	}

	
	
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
